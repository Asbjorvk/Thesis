# Importing packages
import deepxde as dde
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import griddata

# Variables 
h = 1 # m
tmin, tmax = 0, 1 # s or year
cv = 0.5 # m^2/year

# Defining the PDE for the consolidation equation t > 0
def PDE(x,y):
    dp_t = dde.grad.jacobian(y,x, j = 1)
    dp_xx = dde.grad.hessian(y,x, j = 0)
    return (dp_t - cv * dp_xx)

# Defining the function for the analytical solution 
# This soltion is for the dranied top and undrained bottom
def anasol(x): # Since this is the feed, it cannot be a tensor object. Acceptable are python scalars,
    total = 0  # strings, lists, numpy arrays or tensorHandles. I'll be using numpy arrays
    for k in range(1000):
        first = (( (-1) ** (k-1))/(2*k - 1))
        second = np.cos( (2*k - 1) * ( (np.pi * x[:,0:1])/ (2 * h) ) )
        third = np.exp( -(2*k - 1) ** 2 *( (np.pi ** 2 * cv * x[:,1:]) 
                                          / (4 * h ** 2) ) )
        total += (4 / np.pi) * (first * second * third)
    return total

# Defining the function for the initial conditions
def IC(x):
    return 1

# Defining boundary conditions 
# Left boundary is the dirchlet boundary conditions for the values of x = 0
def boundary_l(x, on_boundary):
    return on_boundary and np.isclose(x[0], 0)
# Right boundary is the Von Neumann boundary conditions for the dt/dx = 0
def boundary_r(x, on_boundary):
    return on_boundary and np.isclose(x[0], 1)


# Defining geometry for space and time
geom = dde.geometry.Interval(0, h)
timedomain = dde.geometry.TimeDomain(tmin, tmax)
geomtime = dde.geometry.GeometryXTime(geom, timedomain)

# Defining boundary and initial conditions
bc_r = dde.icbc.NeumannBC(geomtime, lambda x: 0, boundary_r)
bc_l = dde.icbc.DirichletBC(geomtime, lambda x: 0, boundary_l)
ic = dde.icbc.IC(geomtime, IC, lambda _, on_initial: on_initial)

# Defining the problem as a TimePDE
data  = dde.data.TimePDE(geomtime, PDE, [bc_l,bc_r, ic], num_domain = 400,
                         num_boundary = 200, num_initial = 300, 
                         solution = anasol, num_test = 10000, )

# Chosing the network
layer_size = [2] + [32] * 3 + [1]
activation = 'sigmoid'
initializer = 'Glorot uniform'
net = dde.nn.FNN(layer_size, activation, initializer)

# Creating the model
model = dde.Model(data, net)

# Compiling and training the model 
model.compile('adam', lr = 0.001, metrics = ['l2 relative error'])
losshistory, train_state = model.train(iterations = 20000)

# Saving the plot
dde.saveplot(losshistory, train_state, issave = True, isplot=True, loss_fname="loss_DrainedTop_UndrainedBottom.dat",
             train_fname="train_DrainedTop_UndrainedBottom.dat", test_fname ="test_DrainedTop_UndrainedBottom.dat")

# Generating syntetic data for plotting of model
# Space and time
z_syn = np.linspace(0, h, 100)
t_syn = np.linspace(tmin, tmax, 100)
Z_syn, T_syn = np.meshgrid(z_syn,t_syn)

Z_star = np.hstack( (Z_syn.flatten()[:,None], T_syn.flatten()[:,None]) )
prediction = model.predict(Z_star, operator = None)


p_hat = griddata(Z_star, prediction[:,0], (Z_syn, T_syn), method = 'cubic')
p_hat = np.rot90(p_hat)

fig, (ax1, ax2) = plt.subplots(nrows = 2, ncols = 1, sharex = False, sharey = True, figsize = (6,6))
ax1.set_title('Prediction')
ax1.set_ylabel('z [m]')
ax1.set_xlabel('t [yr]')
im1 = ax1.imshow(
    p_hat,
    interpolation = 'nearest',
    cmap = 'viridis',
    extent = [tmin, tmax, h, 0],
    origin = 'lower',
    aspect = 'auto',
    )
fig.colorbar(im1, ax = ax1)

# Loading in data from the analytical solution
data = np.load('Data_anasol_DrainedTop_UndrainedBottom.npz')
p_anasol  = data['p']

# fig, ax2 = plt.subplots()
ax2.set_title('Analytical')
ax2.set_ylabel('z [m]')
ax2.set_xlabel('t [yr]')
im2 = ax2.imshow(
    p_anasol[::,0:],
    interpolation = 'nearest',
    cmap = 'viridis',
    extent = [tmin, tmax, h, 0],
    origin = 'lower',
    aspect = 'auto',
    )
fig.colorbar(im2, ax = ax2)
fig.suptitle('Results: Drained top - Undrained bottom')
plt.tight_layout()
plt.show()
